// <auto-generated />
using System;
using Dreamer.SqlServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dreamer.SqlServer.Migrations
{
    [DbContext(typeof(DreamerDbContext))]
    partial class DreamerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:shared.OrdersSerialNumber", "'OrdersSerialNumber', 'shared', '10000', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dreamer.Models.Main.CartItemSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("DreamerUserId");

                    b.Property<bool>("IsValid");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("DreamerUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Main.CategorySet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsValid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Main.OrderProductSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DiscountPercentage");

                    b.Property<double>("DiscountValue");

                    b.Property<bool>("IsValid");

                    b.Property<double>("NetPrice");

                    b.Property<double>("OneItemPrice");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Main.OrderSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("DreamerUserId");

                    b.Property<bool>("EmailNotified");

                    b.Property<bool>("FreeDelivery");

                    b.Property<bool>("IsValid");

                    b.Property<double>("NetItemsDiscountValue");

                    b.Property<double>("NetItemsPrice");

                    b.Property<Guid>("OrderShipmentSetId");

                    b.Property<DateTimeOffset>("PaymentDateTime");

                    b.Property<int>("SerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR shared.OrdersSerialNumber");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("DreamerUserId");

                    b.HasIndex("OrderShipmentSetId")
                        .IsUnique();

                    b.ToTable("Orders","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Main.OrderShipmentSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeliveryTime");

                    b.Property<bool>("IsValid");

                    b.Property<double>("ShipmentCost");

                    b.Property<DateTimeOffset?>("ShippedTime");

                    b.HasKey("Id");

                    b.ToTable("OrderShipments","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Main.ProductCategorySet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsValid");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Main.ProductSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DiscountPercentage");

                    b.Property<bool>("FreeDelivary");

                    b.Property<bool>("IsValid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.ToTable("Products","Main");
                });

            modelBuilder.Entity("Dreamer.Models.Security.DreamerUserSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsValid");

                    b.Property<DateTimeOffset>("LastActivityDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("DreamerUsers","Security");
                });

            modelBuilder.Entity("Dreamer.Models.Main.CartItemSet", b =>
                {
                    b.HasOne("Dreamer.Models.Security.DreamerUserSet", "DreamerUser")
                        .WithMany("CartItems")
                        .HasForeignKey("DreamerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dreamer.Models.Main.ProductSet", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dreamer.Models.Main.OrderProductSet", b =>
                {
                    b.HasOne("Dreamer.Models.Main.OrderSet", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dreamer.Models.Main.ProductSet", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dreamer.Models.Main.OrderSet", b =>
                {
                    b.HasOne("Dreamer.Models.Security.DreamerUserSet", "DreamerUser")
                        .WithMany()
                        .HasForeignKey("DreamerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dreamer.Models.Main.OrderShipmentSet", "OrderShipment")
                        .WithOne("Order")
                        .HasForeignKey("Dreamer.Models.Main.OrderSet", "OrderShipmentSetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dreamer.Models.Main.ProductCategorySet", b =>
                {
                    b.HasOne("Dreamer.Models.Main.CategorySet", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dreamer.Models.Main.ProductSet", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
